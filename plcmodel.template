/*******************************************************************************
* Copyright (c) 2019 Alair Dias Junior
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
*
* This file is part of l5x2c. To know more about it, acccess:
*    https://github.com/alairjunior/l5x2c
*
*******************************************************************************/

/* This file was generated automatically by l5x2c */
/*     https://github.com/alairjunior/l5x2c       */

#include <assert.h>

int stack[${stack_size}] = {0};
int top = 0;
int acc() {return stack[top-1];}
void push(int x) {stack[top++]=x;}
int pop() {return stack[--top];}
void and() {int a = pop(); int b = pop(); push(a && b);}
void or() {int a = pop(); int b = pop(); push(a || b);}
void clear(){top=0;}

int get_scan_time(){return ${scan_time};}

typedef struct timer {
    int EN;
    int TT;
    int DN;
    long int PRE;
    long int ACC;
} timer;

void ton(int acc, timer t) {
    if (acc) {
        if (t.ACC < t.PRE) {
            t.ACC += get_scan_time();
        } 
        if (t.ACC >= t.PRE) t.DN = 1;
        else t.DN = 0;
    } else {
        t.EN = 0;
        t.DN = 0;
        t.ACC = 0;
    }
    t.TT = t.EN && !t.DN;
    if (acc && (t.ACC >= t.PRE)) assert(t.DN);
}
